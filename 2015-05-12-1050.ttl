@prefix schema: <http://schema.org/> .
@prefix lodide: <http://ontology.lodide.io/> .

<> a lodide:Exercise;
    lodide:intro """<h2>Saved exercise exercise</h2>
            <p>This is the second exercise under construction</p>""";
    lodide:finalWords """<ul>
                    <li>When you're finished press the "Run my code"-button.
                    The results will show up below the button.
                    If you did everything right you should see at least Tim 
                    Berner's Lee first name.</li>
                </ul>""";
    lodide:dataSource [    
        lodide:taskDescription """<ul>
                    <li>As data source specify Tim Berner-Lee's personal profile 
                        document available at <code>https://www.w3.org/People/Berners-Lee/card.rdf</code></li>
                </ul>""";
        lodide:taskSolutionResource <https://www.w3.org/People/Berners-Lee/card.rdf>
                ];
    lodide:dataProcessing [    
        lodide:taskDescription """<ul>
                    <li>Tim Berner-Lee's profile uses the FOAF ontology, write 
                        some code to replace FOAF terms with the corresponding 
                        terms from schema.org.</li>
                    <li>Replace at least the following:
                        <ul>
                            <li><code>http://xmlns.com/foaf/0.1/Person</code> with <code>http://schema.org/Person</code></li>
                            <li><code>http://xmlns.com/foaf/0.1/givenname</code> with <code>http://schema.org/givenName</code></li>
                        </ul>
                    </li>
                    <li>You'll probably need the following functions:
                        <ul>
                            <li><code>forEach(callback)</code> of the 
                                <code>Graph</code> instance (i.e. the object <code>g</code>)
                                to access the individual triples,
                                the <code>callback</code> is a function that gets
                                a <code>Triple</code> as argument.<br>
                                A triple has the following properties:
                                <ul>
                                    <li><code>subject</code></li>
                                    <li><code>predicate</code></li>
                                    <li><code>object</code></li>
                                </ul>
                            </li>
                            <li><code>remove(triple)</code>: to remove a triple 
                                from  a graph.</li>
                            <li><code>createTriple(subject, predicate, object)</code>: 
                                this is a method of the global <code>rdf</code>
                                object and is needed to create a <code>Triple</code>.</li>
                            <li><code>createNamedNode(string)</code>: 
                                this is also a method of the global <code>rdf</code>
                                object and is used to create a <em>named node</em>
                                from the String representation a given 
                                <em>IRI</em> (URI or URL).</li>
                            <li><code>equals(other)</code>: This method is used
                                to check if two objects represent the same node.</li>
                        </ul>
                    </li>
                </ul>""";
        lodide:taskSolutionCode """function replacePredicate(original, replacement) {
  g.forEach(function(t) {
    if (t.predicate.equals(original)) {
      g.remove(t);
      g.add(rdf.createTriple(t.subject, replacement, t.object));
    }
  });
}
function replaceObject(original, replacement) {
  g.forEach(function(t) {
    if (t.object.equals(original)) {
      g.remove(t);
      g.add(rdf.createTriple(t.subject, t.predicate, replacement));
    }
  });
}
var foafPerson = rdf.createNamedNode(
  "http://xmlns.com/foaf/0.1/Person");
var schemaPerson = rdf.createNamedNode(
  "http://schema.org/Person");
replaceObject(foafPerson, schemaPerson);
var foafGivenName = rdf.createNamedNode(
    "http://xmlns.com/foaf/0.1/givenname");
var schemaGivenName = rdf.createNamedNode(
    "http://schema.org/givenName");
replacePredicate(foafGivenName, schemaGivenName);"""
                ];

    lodide:dataRendering [    
        lodide:taskDescription """<ul>
                <li>Render the resource <code>https://www.w3.org/People/Berners-Lee/card#i</code></li>
                <li>You may use the RDF2h matchers from the 
                    <a href="http://rdf2h.github.io/rdf2h/index.html#bernadette-sample">Bernadette example</a>
                    from the <a href="http://rdf2h.github.io/rdf2h/manual.html">RDF2h documentation</a>.
               </li>
            </ul>""";
        lodide:taskSolutionResource <https://www.w3.org/People/Berners-Lee/card#i> ;
        lodide:taskSolutionCode """
@base <http://styles.example.org/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#> .
@prefix s: <http://schema.org/> .

[ a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object s:Person
  ];
  r2h:template [ 
    r2h:context r2h:Default;
    r2h:mustache '''
<h1>{{s:givenName}} {{s:additionalName}} {{s:familyName}}</h1>
{{#+s:knows}}
  <h2>Knows</h2>
  <ul>
  {{#s:knows}}
    {{#+s:givenName}}
    <li>{{s:givenName}} {{s:additionalName}} {{s:familyName}}</li>
    {{/+s:givenName}}
    {{^+s:givenName}}
    <li>{{.}}</li>
    {{/+s:givenName}}                            
  {{/s:knows}}                             
  </ul>                         
{{/+s:knows}} 
    '''
  ]
].
"""
                ].
